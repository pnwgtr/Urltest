# Complete PowerShell Script: HTTP + HTTPS Testing with User-Agent and 403 Fallback

# Define folder path
$folderPath = "C:\\SiteTestDashboard"
New-Item -ItemType Directory -Force -Path $folderPath

# Define base domains
$baseUrls = @(
    "www.playboy.com", "www.pornhub.com", "www.xvideos.com", "www.bet365.com", "www.pokerstars.com",
    "www.fanduel.com", "www.draftkings.com", "www.hidemyass.com", "www.kproxy.com", "www.proxysite.com",
    "www.torproject.org", "malware.testing.google.test", "www.amtso.org", "www.eicar.org",
    "www.facebook.com", "www.instagram.com", "www.twitter.com", "www.tiktok.com", "www.twitch.tv",
    "www.discord.com", "www.stormfront.org", "www.4chan.org", "www.8kun.top", "www.cheaperthandirt.com",
    "www.gunsamerica.com", "www.miniclip.com", "www.roblox.com", "www.fortnite.com", "www.leagueoflegends.com",
    "www.agar.io", "www.slither.io", "www.krunker.io", "www.ebay.com", "www.ubid.com", "www.propertyroom.com",
    "www.coinbase.com", "www.binance.com", "www.kraken.com"
)

# Build http and https versions
$urls = @()
foreach ($base in $baseUrls) {
    $urls += "http://$base"
    $urls += "https://$base"
}

# Initialize results
$results = @()

foreach ($url in $urls) {
    Write-Host "`nTesting $url..."
    $timestamp = Get-Date -Format "yyyy-MM-dd HH:mm:ss"
    $headers = @{ 'User-Agent' = 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 Chrome/120.0 Safari/537.36' }

    try {
        $response = Invoke-WebRequest -Uri $url -Headers $headers -UseBasicParsing -TimeoutSec 10
        $statusCode = $response.StatusCode
        if ($statusCode -eq 403) {
            Write-Host "$url returned 403 Forbidden â€” likely blocking script requests" -ForegroundColor Yellow
            $results += [PSCustomObject]@{
                Timestamp   = $timestamp
                URL         = $url
                Status      = "403 Forbidden (Script Blocked)"
                StatusCode  = $statusCode
                Error       = "Script-level block"
            }
        } else {
            Write-Host "$url ACCESSIBLE (Status Code: $statusCode)" -ForegroundColor Green
            $results += [PSCustomObject]@{
                Timestamp   = $timestamp
                URL         = $url
                Status      = "Accessible"
                StatusCode  = $statusCode
                Error       = ""
            }
        }
    } catch {
        $errorMsg = $_.Exception.Message
        Write-Host "$url BLOCKED or FAILED ($errorMsg)" -ForegroundColor Red
        $results += [PSCustomObject]@{
            Timestamp   = $timestamp
            URL         = $url
            Status      = "Blocked/Failed"
            StatusCode  = ""
            Error       = $errorMsg
        }
    }
}

# Export results to CSV
$csvPath = "$folderPath\\SiteContentTestResults.csv"
$results | Export-Csv -Path $csvPath -NoTypeInformation -Force

# Generate HTML report
$htmlPath = "$folderPath\\SiteContentTestReport.html"
$reportTitle = "Site Content Test Report - $(Get-Date -Format 'yyyy-MM-dd HH:mm:ss')"

$htmlHeader = @"
<html>
<head>
    <title>$reportTitle</title>
    <style>
        body { font-family: Arial; margin: 20px; }
        table { border-collapse: collapse; width: 100%; }
        th, td { border: 1px solid #ddd; padding: 8px; }
        th { background-color: #333; color: white; }
        tr:nth-child(even) { background-color: #f2f2f2; }
        .accessible { color: green; font-weight: bold; }
        .blocked { color: red; font-weight: bold; }
        .forbidden { color: orange; font-weight: bold; }
    </style>
</head>
<body>
    <h2>$reportTitle</h2>
    <table>
        <tr>
            <th>Timestamp</th>
            <th>URL</th>
            <th>Status</th>
            <th>Status Code</th>
            <th>Error</th>
        </tr>
"@

$htmlRows = ""
foreach ($entry in $results) {
    $statusClass = if ($entry.Status -like '*403*') { "forbidden" } elseif ($entry.Status -eq "Accessible") { "accessible" } else { "blocked" }
    $htmlRows += "<tr>
        <td>$($entry.Timestamp)</td>
        <td>$($entry.URL)</td>
        <td class='$statusClass'>$($entry.Status)</td>
        <td>$($entry.StatusCode)</td>
        <td>$($entry.Error)</td>
    </tr>"
}

$htmlFooter = @"
    </table>
</body>
</html>
"@

$htmlContent = $htmlHeader + $htmlRows + $htmlFooter
$htmlContent | Out-File -FilePath $htmlPath -Encoding utf8

Write-Host "`nAll tests completed."
Write-Host "CSV results saved to $csvPath"
Write-Host "HTML report saved to $htmlPath" -ForegroundColor Cyan
